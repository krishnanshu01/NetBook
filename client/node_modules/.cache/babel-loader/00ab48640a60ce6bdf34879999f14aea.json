{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nexport const loadUser = () => async dispatch => {\n  //check if there is token inside the localstorage which we are using to store the token that is randmoly genereated \n  if (localStorage.token) {\n    setAuthToken(localStorage.token); // so header mai dall diya x-auth-token mai bole toh header mai\n  }\n\n  try {\n    const res = await axios.get('/api/auth'); // yha se token nikala\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/rahul/Desktop/myfolder/projects/webdevelopment/third/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert'\nimport{\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\nexport const loadUser = () =>async dispatch =>{   //check if there is token inside the localstorage which we are using to store the token that is randmoly genereated \n   if(localStorage.token){\n       setAuthToken(localStorage.token);      // so header mai dall diya x-auth-token mai bole toh header mai\n   }\n   try{\n       const res = await axios.get('/api/auth');     // yha se token nikala\n    dispatch({\n        type : USER_LOADED,\n        payload: res.data\n    })\n\n\n\n    }catch(err){\n        dispatch({\n            type: AUTH_ERROR\n        })\n   }\n}\n\n//Register User\nexport const register = ({ name , email , password}) => async dispatch => {\n    const config = {\n        headers:{\n            'Content-Type' : 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name , email , password});\n\n    try{\n        const res = await axios.post('api/users' , body , config);\n\n        dispatch({\n            type : REGISTER_SUCCESS,\n            payload: res.data\n        });\n    }catch(err){\n        const errors = err.response.data.errors;\n\n        if(errors){\n            errors.forEach(error => dispatch(setAlert(error.msg , 'danger' )))\n        }\n        dispatch({\n            type:REGISTER_FAIL\n        });\n    }\n}\n\n//Login User\nexport const login = ({ email , password}) => async dispatch => {\n    const config = {\n        headers:{\n            'Content-Type' : 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email , password});\n\n    try{\n        const res = await axios.post('api/auth' , body , config);\n\n        dispatch({\n            type : LOGIN_SUCCESS,\n            payload: res.data\n        });\n    }catch(err){\n        const errors = err.response.data.errors;\n\n        if(errors){\n            errors.forEach(error => dispatch(setAlert(error.msg , 'danger' )))\n        }\n        dispatch({\n            type:LOGIN_FAIL\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}