{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //load user\n\nexport const loadUser = () => async dispatch => {\n  //check if there is token inside the localstorage which we are using to store the token that is randmoly genereated \n  if (localStorage.token) {\n    setAuthToken(localStorage.token); // so header mai dall diya x-auth-token mai bole toh header mai\n  }\n\n  try {\n    const res = await axios.get('/api/auth'); // yha se token nikala\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //for logout/cleare the profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/rahul/Desktop/myfolder/projects/webdevelopment/third/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert'\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS,\n    LOGOUT\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n//load user\nexport const loadUser = () => async dispatch => {   //check if there is token inside the localstorage which we are using to store the token that is randmoly genereated \n    if (localStorage.token) {\n        setAuthToken(localStorage.token);      // so header mai dall diya x-auth-token mai bole toh header mai\n    }\n    try {\n        const res = await axios.get('/api/auth');     // yha se token nikala\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n\n\n\n    } catch (err) {\n        dispatch({\n            type: AUTH_ERROR\n        })\n    }\n}\n\n//Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n        const res = await axios.post('api/users', body, config);\n\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n}\n\n//Login User\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post('api/auth', body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    }\n}\n\n//for logout/cleare the profile\n\nexport const logout = () => dispatch =>{\n    dispatch({ type: LOGOUT});\n}"]},"metadata":{},"sourceType":"module"}