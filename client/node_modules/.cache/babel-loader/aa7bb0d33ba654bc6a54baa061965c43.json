{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST } from './types'; //get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/post');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/post/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //remove like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/post/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/post/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/rahul/Desktop/myfolder/projects/webdevelopment/third/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST\n} from './types';\n\n//get posts\nexport const getPosts = () => async dispatch =>{\n    try{\n        const res = await axios.get('/api/post');\n\n        dispatch({\n            type: GET_POSTS,\n            payload: res.data\n        });\n    }catch(err){\n        dispatch({\n            type : POST_ERROR,\n            payload:{msg: err.response.statusText , status: err.response.status}\n        });\n     }\n    \n}\n\n//Add like\nexport const addLike = id => async dispatch =>{\n    try{\n        const res = await axios.put(`/api/post/like/${id}`);\n\n        dispatch({\n            type: UPDATE_LIKES,\n            payload: {id , likes: res.data}\n        });\n    }catch(err){\n        dispatch({\n            type : POST_ERROR,\n            payload:{msg: err.response.statusText , status: err.response.status}\n        });\n     }\n    \n}\n\n//remove like\nexport const removeLike = id => async dispatch =>{\n    try{\n        const res = await axios.put(`/api/post/unlike/${id}`);\n\n        dispatch({\n            type: UPDATE_LIKES,\n            payload: {id , likes: res.data}\n        });\n    }catch(err){\n        dispatch({\n            type : POST_ERROR,\n            payload:{msg: err.response.statusText , status: err.response.status}\n        });\n     }\n    \n}\n\n//delete post\nexport const deletePost = id => async dispatch =>{\n    try{\n       const res =  await axios.delete(`/api/post/${id}`);\n\n        dispatch({\n            type: DELETE_POST,\n            payload: id\n        });\n\n        dispatch(setAlert('Post Removed' , 'success'));\n    }catch(err){\n        dispatch({\n            type : POST_ERROR,\n            payload:{msg: err.response.statusText , status: err.response.status}\n        });\n     }\n    \n}"]},"metadata":{},"sourceType":"module"}